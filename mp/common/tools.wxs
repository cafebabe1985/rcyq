
var dateHandle = function (date) {
  return date.substring(0, 10)
}

var contentTypeHandle = function (type) {
  switch (type) {
    case '0':
      return '公众号'
      break
    case '1':
      return '图文'
      break
    case '2':
      return '视频'
      break
    default:
      return ''
  }
}
var pathHandle = function (base, src) {
  return (src.indexOf("http:") != -1 || src.indexOf("https:") != -1) ? src : base + src
}

var keywordsHandle = function (str) {

  var strs = str ? str.split(" ") : []
  for (var i = 0; i < strs.length; i++) {
    strs[i] = strs[i].trim()
  }
  return strs
}

var enrolStatusHandle = function (s, e, es, ee) {
 
  var now = getDate().getTime()
  var ss = getDate(s).getTime()//开始
  var es = getDate(e).getTime()//结束
  var ess = getDate(es).getTime()//报名开始
  var ees = getDate(ee).getTime()//报名结束
  if (now < ess) {
   
    return '未开始'
  } else if (now >= ess && now <= ees) {
    
    return '报名中'
  }

  if (now >= ss && now <= es) {
   
    return '进行中'
  }

  if (now > es) {
    
    return '已结束'
  }
}

var activeStatusHandle = function (s, e, ee, st) {
  
  if (st === '0') {
    
    return '审核中'
  }
  var now = getDate().getTime()
  var ss = getDate(s).getTime()//开始
  var es = getDate(e).getTime()//结束
  
  var ees = getDate(ee).getTime()//报名结束
  
  if (now < ss) {
    
    return '未开始'
  } 
  if (now >= ss && now < es) {
   
    return '进行中'
  }

  if (now >= es) {
   
    return '已结束'
  }
}

var activeTypeHandle = function (index) {

  switch (index) {
    case '0':
      return ''
      break
    case '1':
      return '线上活动'
      break
    default:
      return ''
      break
  }
}
var costTypeHandle = function(type){
  switch (type){
    case "0":
    return "免费"
    break
    case "1":
    return "报名后付费"
    break
    case "2":
    return "活动中收费"
    break
    default:
    return ""
  }
}

var costHandle=function(cost){
  
  var total
  if (cost && cost.opts && cost.opts.length>0){
    total = 0
    for (var i=0;i<cost.opts.length;i++){
      total += parseFloat(cost.opts[i].cost)
    }
    if(total&&total>0){
      return "￥"+ total
    }else{
      return "待定"
    }
  }else{
    return "待定"
  }
}
var needExamineEnrolTypeHandle = function(type){
  if(type == '0'){
    return '不需要'
  }else{
    return '需要'
  }
}
var allowEnrolAgentTypeHandle = function(type){
  if (type == '0') {
    return '不允许'
  } else {
    return '允许'
  }
}
var insuranceTypeHandle = function(type){
  var index = parseInt(type)
  var insuranceType= ['无保险要求', '会员自行购买', '主办方统一购买']
  return insuranceType[index]
}
var enrolWayHandle = function(type){
  if (type == '0') {
    return '个人报名'
  } else {
    return '团队报名'
  }
}

var handleEnrolUserInfo = function(opt,index,info){
  var gender = info.userGender
  var cid = info.userCid
  var realName = info.userRealName
  var metaInfo = JSON.parse(info.metaInfo)
  if(opt.name === '性别'){
    return gender
  }else
  if (opt.name === '身份证号') {
    return cid
  }else
  if (opt.name === '真实姓名') {
    return realName
  }else{
    for(var i=0 ;i< metaInfo.length;i++){
      if (opt.name === metaInfo[i].name){
        
        return metaInfo[i].label || metaInfo[i].value
      }
    }
  }

}

var handleGenderCss = function(value){
  switch(value){
    case '0':
    return ''
    break
    case '1':
      return 'cuIcon-male text-blue'
      break
      case '2':
      return 'cuIcon-female text-pink'
      default:
      break
  }
}
 
var handleVipLevel = function(vip){
  if(vip == '1'){
    return '蓝V'
  } else if (vip == '2'){
    return '黄V'
  }else{
    return '普通会员'
  }
}
var isEnrolOver = function(ee){
  var now = getDate().getTime()
  return now <= getDate(ee).getTime()
}

var displayType = function(status){
  switch(status){
    case '0':
    return '待审核'
    case '1':
    return '已发布'
    case '3':
    return '草稿'
  }
}
module.exports = {
  dateHandle: dateHandle,
  contentTypeHandle: contentTypeHandle,
  pathHandle: pathHandle,
  keywordsHandle: keywordsHandle,
  enrolStatusHandle: enrolStatusHandle,
  activeTypeHandle: activeTypeHandle,
  costTypeHandle: costTypeHandle,
  costHandle: costHandle,
  needExamineEnrolTypeHandle: needExamineEnrolTypeHandle,
  allowEnrolAgentTypeHandle: allowEnrolAgentTypeHandle,
  insuranceTypeHandle: insuranceTypeHandle,
  enrolWayHandle: enrolWayHandle,
  handleEnrolUserInfo: handleEnrolUserInfo,
  handleGenderCss: handleGenderCss,
  handleVipLevel: handleVipLevel,
  activeStatusHandle: activeStatusHandle,
  isEnrolOver: isEnrolOver,
  displayType: displayType
};
